(dp1
S'output'
p2
S'<type \'exceptions.SyntaxError\'> define_table argument is not a Field or Table: auth_user.id,auth_user.first_name,auth_user.last_name,auth_user.email,auth_user.username,auth_user.password,auth_user.registration_key,auth_user.reset_password_key,auth_user.registration_id,opettaja.id,opettaja.user_id,kurssi.id,kurssi.title,kurssi.opettaja_id\r\n2,outi,Oppilas,outi.oppilas@gmail.com,outi,"pbkdf2(1000,20,sha512)$ae81bbfdc970f851$e2a70f18114ebd7f6f615a9567bcfbdabe7c797d",,,,2,4,6,FY1,2\r\n3,Ossi,Opettaja,ossi.opettaja@gmail.com,ossi,"pbkdf2(1000,20,sha512)$ad10e6fe2e589055$397cde61b8d9a13b49e5098170f9d193381c1419",,,,3,3,7,KE1,3\r\n'
p3
sS'layer'
p4
S'/home/mka/web2py/applications/kurssihallinta/controllers/opettaja.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n\n@auth.requires_membership(\'opettaja\')\ndef kaikki_kurssit():\n    """\n    Opettajan kaikki kurssit\n    """\n    import sys\n    #kurssit = db().select(db.kurssi.ALL, orderby=db.kurssi.title)\n    #query = (db.opettaja.id == auth.user.id)&\\\n    #    (db.kurssi.opettaja_id == db.opettaja.id)\n    query = (db.opettaja.id == db.auth_user.id)&\\\n        (db.kurssi.opettaja_id == db.opettaja.id)\n    opettajan_kurssit = db(query).select()\n    oppilaita_kurssilla = []\n    for rivi in opettajan_kurssit:\n        kurssi = rivi.kurssi\n        query = (rivi.kurssi.id == db.oppilaatKursseilla.kurssi_id)\n        oppilaita_kurssilla.append(db(query).count())\n    input1 = INPUT(_type=\'submit\', _name=\'test\', value=\'b\')\n    select1 = SELECT(\'a\', \'b\', value=\'b\')\n\n    #upper bar\n    #check = FORM(INPUT(_name=\'visitor_name\', requires=IS_NOT_EMPTY()),\n    #          INPUT(_type=\'submit\'))\n    #if check.process().accepted:\n    #    session.visitor_name = check.vars.visitor_name\n    #    redirect(URL(\'opettaja\'))\n    #query = (db.kurssi.id == auth.user.id)&\\\n    #    (db.oppilas.kurssi_id == db.kurssi.id)\n    #oppilaita_kurssilla = db(query).count()\n\n    #kurssit = db().select(db.kurssi.id == 1, orderby=db.kurssi.title)\n    #oppilaita_kurssilla = db(db.kurssi.id > 0).count()\n    #db(db.kurssi.id == db.opettaja.kurssi_id).count()\n    response.view = \'opettaja/opettaja_kaikki_kurssit.html\'\n\n    #form = FORM(INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n    #            INPUT(_type=\'submit\'))\n\n\n    #aaa= A(\'click me\',_href=URL(\'action\'))\n    aaa= A(\'click me\',_href=URL(\'kaikki_kurssit\'))\n    #print dir(aaa)\n    b = A(\'click ME\', callback=URL(\'kaikki_kurssit\'),target=\'t\')\n    print b.tag\n\n    #form = SQLFORM.factory(\n    #Field(\'kurssi\', requires=IS_IN_DB(db, db.kurssi.id, \'%(title)s\')))\n    form = SQLFORM.factory(opettajan_kurssit)\n\n\n    #form = SQLFORM(db.kurssi,fields=[\'title\'],\n    #               buttons=[TAG.button(\'Next\',_type="submit")])\n    #Field(\'kurssi\'))\n\n    #form = SQLFORM.factory(\n    #Field(\'kurssi\'))\n\n    #form = FORM(SELECT(\n    #OPTION(\'Option1\', _value=\'1\'),\n    #OPTION(\'Option2\', _value=\'2\')\n    #))\n\n    #form.add_button(\'Select\', URL(\'kaikki_kurssit\'))\n\n    if form.process().accepted:\n        print "OK",form.vars.kurssi\n\n\n    return dict(opettajan_kurssit=opettajan_kurssit,\n                oppilaita_kurssilla=oppilaita_kurssilla,\n                input1=input1, select1=select1, form=form, aaa=aaa, b=b)\n\n#@auth.requires_membership(\'opettaja\')\ndef yksi_kurssi():\n    """\n    Opettajan yksi kurssi\n    """\n    kurssit = db(db.kurssi.id == db.opettaja.kurssi_id).select()\n    oppilaita_kurssilla = 1\n    #db(db.kurssi.id > 0).count()\n    response.view = \'opettaja/opettaja_yksi_kurssi.html\'\n    return dict(kurssit=kurssit,oppilaita_kurssilla=oppilaita_kurssilla)\n\nresponse._vars=response._caller(kaikki_kurssit)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mka/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/mka/web2py/applications/kurssihallinta/controllers/opettaja.py", line 87, in <module>\n  File "/home/mka/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mka/web2py/gluon/tools.py", line 3287, in f\n    return action(*a, **b)\n  File "/home/mka/web2py/applications/kurssihallinta/controllers/opettaja.py", line 51, in kaikki_kurssit\n    form = SQLFORM.factory(opettajan_kurssit)\n  File "/home/mka/web2py/gluon/sqlhtml.py", line 1651, in factory\n    return SQLFORM(DAL(None).define_table(table_name, *fields),\n  File "/home/mka/web2py/gluon/dal.py", line 8223, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/mka/web2py/gluon/dal.py", line 8240, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/home/mka/web2py/gluon/dal.py", line 8725, in __init__\n    \'define_table argument is not a Field or Table: %s\' % field)\nSyntaxError: define_table argument is not a Field or Table: auth_user.id,auth_user.first_name,auth_user.last_name,auth_user.email,auth_user.username,auth_user.password,auth_user.registration_key,auth_user.reset_password_key,auth_user.registration_id,opettaja.id,opettaja.user_id,kurssi.id,kurssi.title,kurssi.opettaja_id\r\n2,outi,Oppilas,outi.oppilas@gmail.com,outi,"pbkdf2(1000,20,sha512)$ae81bbfdc970f851$e2a70f18114ebd7f6f615a9567bcfbdabe7c797d",,,,2,4,6,FY1,2\r\n3,Ossi,Opettaja,ossi.opettaja@gmail.com,ossi,"pbkdf2(1000,20,sha512)$ad10e6fe2e589055$397cde61b8d9a13b49e5098170f9d193381c1419",,,,3,3,7,KE1,3\r\n\n'
p11
s.