(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> long() argument must be a string or a number, not 'Rows'"
p3
sS'layer'
p4
S'/home/mka/web2py/applications/kurssihallinta/controllers/opiskelija.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n#reload modules\nfrom gluon.custom_import import track_changes; track_changes(True)\nimport opiskelija_haut  #tietokantahaut ../modules/opiskelija_haut.py\nimport kurssi_haut  #tietokantahaut ../modules/kurssi_haut.py\n\n@auth.requires_membership(\'opiskelija\')\ndef kaikki_kurssit():\n    """\n    Opiskelijan kaikki kurssit\n    """\n    import sys\n\n    query = opiskelija_haut.hae_opiskelijan_kaikki_kurssit(db)\n    oppilaita_kurssilla = []\n\n    form_lisaa = FORM(\'Lis\xc3\xa4\xc3\xa4 ty\xc3\xb6:\',\n                         SELECT(\'Lis\xc3\xa4\xc3\xa4!\',\n                                _name="my_selector"),\n                         INPUT(_type=\'submit\'))\n    form = SQLFORM.grid(query,create=False,searchable=False)\n\n    response.view = \'opiskelija/opiskelija_kaikki_kurssit.html\'\n\n\n    if form_lisaa.process().accepted:\n        print "LISATAAN !!!"\n        redirect(URL(\'opiskelija_lisaa_kurssityo\'))\n    #    print "HYV\xc3\x84KSYTTY", form.vars.kurssin_nimi\n    #    kurssi_id_tmp = int(form.vars.kurssin_nimi)-1\n    #    kurssi_id = kurssi_idt[kurssi_id_tmp]\n    #    form.vars.kurssin_nimi = kurssi_id\n    #    print "HYV\xc3\x84KSYTTY222", form.vars.kurssin_nimi\n\n        #pit\xc3\xa4\xc3\xa4 pudottaa fake-tietokantataulu pois \n        # jottei se kasva kokoajan\n    #    db.valitsekurssi.drop()\n    #    redirect(URL(\'yksi_kurssi\',vars=dict(kurssi_id=kurssi_id)))\n\n    return dict(oppilaita_kurssilla=oppilaita_kurssilla,\n                form=form, form_lisaa=form_lisaa)\n\n\n#@auth.requires_membership(\'opiskelija\')\ndef yksi_kurssi():\n    """\n    Opiskelijan yksi kurssi\n    """\n    opiskelijan_kurssin_kurssityot = \\\n        kurssi_haut.hae_kurssin_kurssityot(request.vars.kurssi_id, db)\n    opiskelijan_kurssin_nimi = \\\n        kurssi_haut.hae_kurssin_nimi(request.vars.kurssi_id, db)\n    print "opiskelijan_kurssin_nimi", opiskelijan_kurssin_nimi[0].values()\n    opiskelijan_kurssin_nimi = opiskelijan_kurssin_nimi[0].values()[0]\n\n    print "kurssiID", request.vars.kurssi_id\n    #print "opiskelijan_kurssin_kurssityot", opiskelijan_kurssin_kurssityot\n    oppilaita_kurssilla = 1\n    response.view = \'opiskelija/opiskelija_yksi_kurssi.html\'\n\n    return dict(opiskelijan_kurssin_kurssityot=opiskelijan_kurssin_kurssityot,\n                opiskelijan_kurssin_nimi = opiskelijan_kurssin_nimi)\n\n\n#@auth.requires_membership(\'opiskelija\')\ndef opiskelija_lisaa_kurssityo():\n    """\n    Opiskelija voi lis\xc3\xa4t\xc3\xa4 yhden kurssity\xc3\xb6n\n    """\n    from gluon.tools import Auth\n    auth = Auth(db)\n    print "opiskelija id", \\\n    db(db.opiskelija.user_id == auth.user_id).select(db.opiskelija.id)\n    current_opiskelija_id = \\\n        db(db.opiskelija.user_id == auth.user_id).select(db.opiskelija.id)\n    query = (db.kurssityo.opiskelija_id==current_opiskelija_id)\n#    db.kurssityo.property.requires=IS_IN_DB(db(query)) \n    db.kurssityo.opiskelija_id.requires=IS_IN_DB(db(query),\'kurssityo.id\') \n    form = SQLFORM(db.kurssityo,fields = [\'nimi_id\',\'palautettu\',\'opiskelija_id\'])\n    if form.process().accepted:\n        print form.vars.id\n        db.kurssityo[form.vars.id] = dict(opiskelija_id=current_opiskelija)\n        #db.kurssityo[form.vars.id] = dict(kurssi_id=1)\n    return dict(form=form)\n\nresponse._vars=response._caller(opiskelija_lisaa_kurssityo)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mka/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/mka/web2py/applications/kurssihallinta/controllers/opiskelija.py", line 86, in <module>\n  File "/home/mka/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mka/web2py/applications/kurssihallinta/controllers/opiskelija.py", line 79, in opiskelija_lisaa_kurssityo\n    form = SQLFORM(db.kurssityo,fields = [\'nimi_id\',\'palautettu\',\'opiskelija_id\'])\n  File "/home/mka/web2py/gluon/sqlhtml.py", line 1151, in __init__\n    inp = self.widgets.options.widget(field, default)\n  File "/home/mka/web2py/gluon/sqlhtml.py", line 273, in widget\n    options = requires[0].options()\n  File "/home/mka/web2py/gluon/validators.py", line 559, in options\n    self.build_set()\n  File "/home/mka/web2py/gluon/validators.py", line 545, in build_set\n    records = self.dbset(table).select(*fields, **dd)\n  File "/home/mka/web2py/gluon/dal.py", line 10525, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/mka/web2py/gluon/dal.py", line 2458, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/mka/web2py/gluon/dal.py", line 1869, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/mka/web2py/gluon/dal.py", line 1774, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/mka/web2py/gluon/dal.py", line 1541, in expand\n    out = op(first, second, **optional_args)\n  File "/home/mka/web2py/gluon/dal.py", line 1381, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/mka/web2py/gluon/dal.py", line 1541, in expand\n    out = op(first, second, **optional_args)\n  File "/home/mka/web2py/gluon/dal.py", line 1438, in EQ\n    self.expand(second, first.type))\n  File "/home/mka/web2py/gluon/dal.py", line 1552, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/mka/web2py/gluon/dal.py", line 2014, in represent\n    return str(long(obj))\nTypeError: long() argument must be a string or a number, not \'Rows\'\n'
p11
s.