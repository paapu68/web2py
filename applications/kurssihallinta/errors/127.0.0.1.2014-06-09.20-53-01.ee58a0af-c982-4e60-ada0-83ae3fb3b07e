(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '|6|7|'"
p3
sS'layer'
p4
S'/home/mka/web2py/applications/kurssihallinta/controllers/opettaja.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n#reload modules\nfrom gluon.custom_import import track_changes; track_changes(True)\nimport opettaja_haut  #tietokantahaut ../modules/opettaja_haut.py\nimport kurssi_haut  #tietokantahaut ../modules/kurssi_haut.py\n\n#import opettajan_haut #../models/opettajan_haut.py\n\ndef ohjaa_kursseille(kurssi_ids):\n    print "kurssi_ids", kurssi_ids\n    redirect(URL(\'yksi_kurssi\',vars=dict(kurssi_ids=kurssi_ids)))\n\n\n@auth.requires_membership(\'opettaja\')\ndef kaikki_kurssit():\n    """\n    Opettajan kaikki kurssit\n    """\n    import sys\n    query = opettaja_haut.hae_opettajan_kaikki_kurssit(db)\n    \n    form = SQLFORM.grid(query, \n                        field_id = db.kurssi.id,\n                        fields = [db.kurssi.title],\n                        selectable = lambda ids: ohjaa_kursseille(ids))\n\n    oppilaita_kurssilla = []\n    #tehd\xc3\xa4\xc3\xa4n fake-database k\xc3\xa4ytt\xc3\xa4en haettujen kurssien nimi\xc3\xa4\n    #jotta saadaan ne alasvetovalikkoon\n    #db.define_table(\'valitsekurssi\',\n    #                Field(\'kurssin_nimi\'),\n    #                format = \'%(kurssin_nimi)s\'\n    #                )\n    #kurssi_idt = []\n    #for rivi in opettajan_kurssit:\n    #    db.valitsekurssi.insert(kurssin_nimi=rivi.kurssi.title)\n    #    print rivi.kurssi.id\n    #    kurssi_idt.append(rivi.kurssi.id)\n\n    #form = SQLFORM.factory(\n    #    Field(\'kurssin_nimi\', requires=IS_IN_DB(db, \n    #                                    db.valitsekurssi.id,\n    #                                    \'%(kurssin_nimi)s\', zero=None)))\n\n    \n\n    response.view = \'opettaja/opettaja_kaikki_kurssit.html\'\n\n\n    #if form.process().accepted:\n    #    print "HYV\xc3\x84KSYTTY", form.vars.kurssin_nimi\n    #    kurssi_id_tmp = int(form.vars.kurssin_nimi)-1\n    #    kurssi_id = kurssi_idt[kurssi_id_tmp]\n    #    form.vars.kurssin_nimi = kurssi_id\n    #    print "HYV\xc3\x84KSYTTY222", form.vars.kurssin_nimi\n\n    #    #pit\xc3\xa4\xc3\xa4 pudottaa fake-tietokantataulu pois \n    #    # jottei se kasva kokoajan\n    #    db.valitsekurssi.drop()\n    #    redirect(URL(\'yksi_kurssi\',vars=dict(kurssi_id=kurssi_id)))\n\n\n    return dict(form=form)\n\n#@auth.requires_membership(\'opettaja\')\ndef yksi_kurssi():\n    """\n    Opettajan yksi kurssi\n    """\n    print "request.vars.kurssi_ids",request.vars.kurssi_ids\n    \n    opettajan_kurssin_kurssityot = \\\n        kurssi_haut.hae_kurssin_kurssityot(request.vars.kurssi_ids, db)\n    opettajan_kurssin_nimi = \\\n        kurssi_haut.hae_kurssin_nimi(request.vars.kurssi_ids, db)\n    print "opettajan_kurssin_nimi", opettajan_kurssin_nimi[0].values()\n    opettajan_kurssin_nimi = opettajan_kurssin_nimi[0].values()[0]\n\n    print "kurssiID", request.vars.kurssi_ids\n    #print "opettajan_kurssin_kurssityot", opettajan_kurssin_kurssityot\n    oppilaita_kurssilla = 1\n    response.view = \'opettaja/opettaja_yksi_kurssi.html\'\n\n\n    return dict(opettajan_kurssin_kurssityot=opettajan_kurssin_kurssityot,\n                opettajan_kurssin_nimi = opettajan_kurssin_nimi)\n\nresponse._vars=response._caller(yksi_kurssi)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mka/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/mka/web2py/applications/kurssihallinta/controllers/opettaja.py", line 88, in <module>\n  File "/home/mka/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mka/web2py/applications/kurssihallinta/controllers/opettaja.py", line 75, in yksi_kurssi\n    kurssi_haut.hae_kurssin_nimi(request.vars.kurssi_ids, db)\n  File "applications/kurssihallinta/modules/kurssi_haut.py", line 18, in hae_kurssin_nimi\n    return db(query).select(db.kurssi.title)\n  File "/home/mka/web2py/gluon/dal.py", line 10525, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/mka/web2py/gluon/dal.py", line 2458, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/mka/web2py/gluon/dal.py", line 1869, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/mka/web2py/gluon/dal.py", line 1774, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/mka/web2py/gluon/dal.py", line 1541, in expand\n    out = op(first, second, **optional_args)\n  File "/home/mka/web2py/gluon/dal.py", line 1438, in EQ\n    self.expand(second, first.type))\n  File "/home/mka/web2py/gluon/dal.py", line 1552, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/mka/web2py/gluon/dal.py", line 2007, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'|6|7|\'\n'
p11
s.